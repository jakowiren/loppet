generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String         @unique
  username            String         @unique
  displayName         String         @map("display_name")
  avatarUrl           String?        @map("avatar_url")
  phone               String?
  location            String?
  bio                 String?
  rating              Decimal?       @default(0.0) @db.Decimal(3, 2)
  totalSales          Int?           @default(0) @map("total_sales")
  totalEarnings       Int?           @default(0) @map("total_earnings")
  createdAt           DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  activities          Activity[]
  ads                 Ad[]
  buyerConversations  Conversation[] @relation("BuyerConversations")
  sellerConversations Conversation[] @relation("SellerConversations")
  favorites           Favorite[]
  sentMessages        Message[]

  @@map("profiles")
}

model Race {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  date              DateTime? @db.Timestamptz(6)
  location          String?
  participantsCount String?   @map("participants_count")
  registrationUrl   String?   @map("registration_url")
  color             String?   @default("#3B82F6")
  isActive          Boolean?  @default(true) @map("is_active")
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("races")
}

model Ad {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  description    String
  price          Int
  category       AdCategory
  condition      AdCondition
  location       String
  status         AdStatus?      @default(ACTIVE)
  images         String[]       @default([])
  sellerId       String         @map("seller_id") @db.Uuid
  views          Int?           @default(0)
  favoritesCount Int?           @default(0) @map("favorites_count")
  createdAt      DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  soldAt         DateTime?      @map("sold_at") @db.Timestamptz(6)
  soldPrice      Int?           @map("sold_price")
  activities     Activity[]
  statistics     AdStatistic[]
  seller         Profile        @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  conversations  Conversation[]
  favorites      Favorite[]

  @@map("ads")
}

model Favorite {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  adId      String    @map("ad_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  ad        Ad        @relation(fields: [adId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      Profile   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, adId])
  @@map("favorites")
}

model Activity {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String       @map("user_id") @db.Uuid
  activityType ActivityType @map("activity_type")
  adId         String?      @map("ad_id") @db.Uuid
  adTitle      String?      @map("ad_title")
  metadata     Json?        @default("{}")
  createdAt    DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  ad           Ad?          @relation(fields: [adId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         Profile      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("activities")
}

model Conversation {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adId          String             @map("ad_id") @db.Uuid
  buyerId       String             @map("buyer_id") @db.Uuid
  sellerId      String             @map("seller_id") @db.Uuid
  status        ConversationStatus @default(ACTIVE)
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  lastMessageAt DateTime           @default(now()) @map("last_message_at") @db.Timestamptz(6)
  ad            Ad                 @relation(fields: [adId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversations_ad")
  buyer         Profile            @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversations_buyer")
  seller        Profile            @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversations_seller")
  messages      Message[]

  @@unique([adId, buyerId, sellerId], map: "uq_conversations_ad_buyer_seller")
  @@index([adId], map: "idx_conversations_ad_id")
  @@index([buyerId], map: "idx_conversations_buyer_id")
  @@index([lastMessageAt(sort: Desc)], map: "idx_conversations_last_message_at")
  @@index([sellerId], map: "idx_conversations_seller_id")
  @@index([status], map: "idx_conversations_status")
  @@map("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  fromUserId     String       @map("from_user_id") @db.Uuid
  content        String
  sentAt         DateTime     @default(now()) @map("sent_at") @db.Timestamptz(6)
  readAt         DateTime?    @map("read_at") @db.Timestamptz(6)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_messages_conversation")
  fromUser       Profile      @relation(fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_messages_from_user")

  @@index([conversationId], map: "idx_messages_conversation_id")
  @@index([fromUserId], map: "idx_messages_from_user_id")
  @@index([sentAt(sort: Desc)], map: "idx_messages_sent_at")
  @@map("messages")
}

model AdStatistic {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adId            String   @map("ad_id") @db.Uuid
  date            DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  views           Int      @default(0)
  favorites       Int      @default(0)
  contactAttempts Int      @default(0) @map("contact_attempts")
  ad              Ad       @relation(fields: [adId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ad_statistics_ad")

  @@unique([adId, date], map: "uq_ad_statistics_ad_date")
  @@index([adId, date(sort: Desc)], map: "idx_ad_statistics_ad_date")
  @@index([adId], map: "idx_ad_statistics_ad_id")
  @@index([date(sort: Desc)], map: "idx_ad_statistics_date")
  @@map("ad_statistics")
}

enum AdStatus {
  ACTIVE
  SOLD
  PAUSED

  @@map("ad_status")
}

enum AdCondition {
  NYTT        @map("Nytt")
  SOM_NYTT    @map("Som nytt")
  MYCKET_BRA  @map("Mycket bra")
  BRA         @map("Bra")
  ACCEPTABELT @map("Acceptabelt")

  @@map("ad_condition")
}

enum AdCategory {
  Cyklar              @map("Cyklar")
  Kläder              @map("Kläder")
  Skor                @map("Skor")
  Tillbehör           @map("Tillbehör")
  Klockor             @map("Klockor")
  Hjälmar             @map("Hjälmar")
  Nutrition           @map("Nutrition")
  Annat               @map("Annat")

  @@map("ad_category")
}

enum RaceType {
  Triathlon
  Vasaloppet
  Vätternrundan
  Ironman
  Cykelrace
  Löpning
  Simning
  Multisport

  @@map("race_type")
}

enum ActivityType {
  AD_CREATED
  AD_SOLD
  AD_FAVORITED
  MESSAGE_RECEIVED
  AD_VIEWED

  @@map("activity_type")
}

enum ConversationStatus {
  ACTIVE
  CLOSED

  @@map("conversation_status")
}
