// Loppet Marketplace - Prisma Schema
// Swedish sports equipment marketplace focused on endurance sports

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User profiles (extends Supabase auth.users)
model Profile {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  displayName   String   @map("display_name")
  avatarUrl     String?  @map("avatar_url")
  phone         String?
  location      String?
  bio           String?
  rating        Decimal? @default(0.0) @db.Decimal(3, 2)
  totalSales    Int      @default(0) @map("total_sales")
  totalEarnings Int      @default(0) @map("total_earnings")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  ads           Ad[]
  favorites     Favorite[]
  activities    Activity[]
  buyerConversations  Conversation[] @relation("BuyerConversations")
  sellerConversations Conversation[] @relation("SellerConversations")
  sentMessages  Message[]

  @@map("profiles")
}

// Swedish races and events
model Race {
  id                String   @id @default(uuid())
  name              String
  description       String?
  date              DateTime?
  location          String?
  participantsCount String?  @map("participants_count")
  registrationUrl   String?  @map("registration_url")
  color             String   @default("#3B82F6")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("races")
}

// Enums for marketplace
enum AdStatus {
  ACTIVE
  SOLD
  PAUSED

  @@map("ad_status")
}

enum AdCondition {
  NYTT       @map("Nytt")
  SOM_NYTT   @map("Som nytt")
  MYCKET_BRA @map("Mycket bra")
  BRA        @map("Bra")
  ACCEPTABELT @map("Acceptabelt")

  @@map("ad_condition")
}

enum AdCategory {
  CYKLAR              @map("Cyklar")
  KLADER              @map("Kläder")
  SKOR                @map("Skor")
  TILLBEHOR           @map("Tillbehör")
  KLOCKOR             @map("Klockor")
  HJALMAR             @map("Hjälmar")
  VATSKOR_NUTRITION   @map("Vätskor & Nutrition")
  ANNAT               @map("Annat")

  @@map("ad_category")
}

enum RaceType {
  TRIATHLON    @map("Triathlon")
  VASALOPPET   @map("Vasaloppet")
  VATTERNRUNDAN @map("Vätternrundan")
  IRONMAN      @map("Ironman")
  CYKELRACE    @map("Cykelrace")
  LOPNING      @map("Löpning")
  SIMNING      @map("Simning")
  MULTISPORT   @map("Multisport")

  @@map("race_type")
}

// Core marketplace listings
model Ad {
  id             String      @id @default(uuid())
  title          String
  description    String      @db.Text
  price          Int
  category       AdCategory
  raceType       RaceType    @map("race_type")
  condition      AdCondition
  location       String
  status         AdStatus    @default(ACTIVE)
  images         String[]    @default([])
  sellerId       String      @map("seller_id")
  views          Int         @default(0)
  favoritesCount Int         @default(0) @map("favorites_count")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  soldAt         DateTime?   @map("sold_at")
  soldPrice      Int?        @map("sold_price")

  // Relations
  seller        Profile       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  favorites     Favorite[]
  activities    Activity[]
  conversations Conversation[]
  statistics    AdStatistic[]

  @@map("ads")
}

// User favorites
model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  adId      String   @map("ad_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  ad   Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([userId, adId])
  @@map("favorites")
}

// Activity tracking
enum ActivityType {
  AD_CREATED
  AD_SOLD
  AD_FAVORITED
  MESSAGE_RECEIVED
  AD_VIEWED

  @@map("activity_type")
}

model Activity {
  id           String       @id @default(uuid())
  userId       String       @map("user_id")
  activityType ActivityType @map("activity_type")
  adId         String?      @map("ad_id")
  adTitle      String?      @map("ad_title")
  metadata     Json         @default("{}")
  createdAt    DateTime     @default(now()) @map("created_at")

  // Relations
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  ad   Ad?      @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// Messaging system
enum ConversationStatus {
  ACTIVE
  CLOSED

  @@map("conversation_status")
}

model Conversation {
  id            String             @id @default(uuid())
  adId          String             @map("ad_id")
  buyerId       String             @map("buyer_id")
  sellerId      String             @map("seller_id")
  status        ConversationStatus @default(ACTIVE)
  createdAt     DateTime           @default(now()) @map("created_at")
  lastMessageAt DateTime           @default(now()) @map("last_message_at")

  // Relations
  ad       Ad        @relation(fields: [adId], references: [id], onDelete: Cascade)
  buyer    Profile   @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade)
  seller   Profile   @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([adId, buyerId, sellerId])
  @@map("conversations")
}

model Message {
  id             String      @id @default(uuid())
  conversationId String      @map("conversation_id")
  fromUserId     String      @map("from_user_id")
  content        String      @db.Text
  sentAt         DateTime    @default(now()) @map("sent_at")
  readAt         DateTime?   @map("read_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  fromUser     Profile      @relation(fields: [fromUserId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Analytics
model AdStatistic {
  id              String   @id @default(uuid())
  adId            String   @map("ad_id")
  date            DateTime @default(now()) @db.Date
  views           Int      @default(0)
  favorites       Int      @default(0)
  contactAttempts Int      @default(0) @map("contact_attempts")

  // Relations
  ad Ad @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([adId, date])
  @@map("ad_statistics")
}